openapi: 3.0.3
info:
  title: QI API
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1 
paths:
  /getLastUpdatesDate:
    get:
      tags:
        - Last Update Date
      description: Return sLast Claims and EHR updates. Should take a type as a param to get  specific value, either Claims or EHR. Expected return is date string
      operationId: getLastUpdatesDate
      parameters: 
        - name: type
          in: query
          description: example Claims, EHR
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Date'   
      security:
        - api_key: []
        
  /getClosedQualityGaps:
    get:
      tags:
        - Closed Quality Gaps
      summary: Not sure about naming
      operationId: getClosedQualityGaps
      parameters: 
        - name: tierNum
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: tierId
          in: query
          required: true
          schema:
            type: string
        - name: dateStart
          in: query
          schema:
            type: string
            format: date
        - name: dateEnd
          in: query
          schema:
            type: string
            format: date
        - name: assignment
          in: query
          schema:
            type: string
        - name: dataFeeds
          in: query
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QualityGaps'   
      security:
        - api_key: [] 
  /getPatientsMetricWithAllQualityGapsClosed:
    get:
      tags:
        - Closed Quality Gaps
      summary: Not sure about naming
      operationId: getPatientsMetricWithAllQualityGapsClosed
      parameters: 
        - name: tierNum
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: tierId
          in: query
          required: true
          schema:
            type: string
        - name: dateStart
          in: query
          schema:
            type: string
            format: date
        - name: dateEnd
          in: query
          schema:
            type: string
            format: date
        - name: assignment
          in: query
          schema:
            type: string
        - name: dataFeeds
          in: query
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QualityGaps'       
      security:
        - api_key: []  
        
  /getMeasure:
    get:
      tags:
        - Measure Data
      summary: Expected return is either one or list of measures
      operationId: getMeasure
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: tierNum
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: tierId
          in: query
          required: true
          schema:
            type: string
        - name: dateStart
          in: query
          schema:
            type: string
            format: date
        - name: dateEnd
          in: query
          schema:
            type: string
            format: date
        - name: assignment
          in: query
          schema:
            type: string
        - name: dataFeeds
          in: query
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Measure'
               
      security:
        - api_key: []  
        
  /measureInfo:
    get:
      tags:
        - Measure Data
      summary: Get specific measure general info/message
      operationId: measureInfo
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: tierNum
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: tierId
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/MeasureInfo'
      security:
        - api_key: []   
  /measurePatients:
    get:
      tags:
        - Measure Data
      summary: Get measure patients. (Add filter params?)
      operationId: measurePatients
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: tierNum
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: tierId
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/Patient'
      security:
        - api_key: []   
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a pet
      description: Place a new order in the store
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '405':
          description: Invalid input
  /store/order/{orderId}:
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Date:
      type: object
      properties: 
        date:
          type: string
          format: date-time 
      xml:
        name: date
    QualityGaps:
      type: object
      properties:
        total:
          type: integer
          format: int64
          example: 100
        closed:
          type: integer
          format: int64
          example: 90
      xml:
        name: qualityGaps
    Measure:
      type: object
      properties:
        id: # is needed to pull more details from the DB
          type: number
          example: 1
        name: # is needed to pull more details from the DB
          type: string
          example: 'BreastCancerScreening'
        title:
          type: string
          example: 'Breast Cancer Screening'
        description: # tooltip
          type: string
          example: 'Lorem ipsum dolor sit amet'
        numerator: 
          type: integer
          example: 40
        denominator: 
          type: integer
          example: 100
        target: 
          type: integer
          example: 50
      xml:
        name: measure
        
    MeasureInfo:
      type: object
      properties:
        message:  # need to clarify this schema
          type: string
          example: "Lorem ipsum dolor sit amet"
      xml:
        name: measureInfo
        
        
    Patient:
      type: object
      properties:
        mbi:
          type: string
          example: "XXXX-YYYY-ZZZZ"
        fullName:
          type: string
          example: 'Henry, Arthur'
        dob:
          type: string
          format: date
          example: '01/01/1950'
        gender:
          type: string
          example: 'M'
        lastAwv:
          type: string
          format: date
          example: '01/01/2023'
        riskCategory:
          type: string
          example: 'High'
        assignment:
          type: string
          example: 'Attributed'
        attributedProvider:
          type: string
          example: 'Perkins, Leroy'
        lastServiceDate:
          type: string
          format: date
          example: '02/02/2023'
      xml:
        name: patient
 
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header